contract ItemRegistry =

    // CONTRACT STATE DEFINITION
    record state = 
        { maintainer : address
        , limit: int
        , items: map(bytes(64), string) }

    // EVENTS
    datatype event = ItemAdded(bytes(64))

    // INIT METHOD
    entrypoint init(limit : int) =
        { maintainer = Call.caller,
          limit = limit,
          items = {} }

    // STATEFUL FUNCTIONS
    stateful entrypoint changeMaintainer(newMaintainer: address) =
        onlyMaintainer()
        put(state{maintainer = newMaintainer})

    stateful entrypoint addItem(publicKey: bytes(64), metadata: string) =
        onlyMaintainer()
        require(Map.size(state.items) < state.limit, "maximum amount of items reached.")
        require(!Map.member(publicKey, state.items), "item already included in registry")
        put(state{items[publicKey] = metadata})
        Chain.event(ItemAdded(publicKey))

    // READY ONLY FUNCTIONS
    entrypoint getLimit() =
        state.limit

    entrypoint verifyItem(publicKey: bytes(64), challengeMsg: hash, sig: bytes(64)) : bool =
        // after LIMA hardfork we need to use Crypto.verify_sig_secp256k1
        (Map.member(publicKey, state.items) && Crypto.ecverify_secp256k1(challengeMsg, publicKey, sig))

    // VERIFICATION FUNCTIONS
    function onlyMaintainer() =
        require(Call.caller == state.maintainer, "caller must be the maintainer")

    // HELPER FUNCTIONS
    function size(l : list('a)) : int = size'(l, 0)
    function size'(l : list('a), x : int) : int =
        switch(l)
            [] => x
            _ :: l' => size'(l', x + 1)